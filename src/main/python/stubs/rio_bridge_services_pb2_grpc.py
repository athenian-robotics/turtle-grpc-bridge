# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import google.protobuf.empty_pb2 as google_dot_protobuf_dot_empty__pb2
import google.protobuf.wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2
import grpc

import rio_bridge_services_pb2 as rio__bridge__services__pb2


class TwistSampleServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.streamTwistData = channel.stream_stream(
        '/twist_service.TwistSampleService/streamTwistData',
        request_serializer=rio__bridge__services__pb2.TwistData.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )


class TwistSampleServiceServicer(object):

  def streamTwistData(self, request_iterator, context):
      """DEPRECATED blockingStubRef and writeTwistData()
      rpc writeTwistData (TwistData) returns (google.protobuf.Empty);
      """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TwistSampleServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'streamTwistData': grpc.stream_stream_rpc_method_handler(
          servicer.streamTwistData,
          request_deserializer=rio__bridge__services__pb2.TwistData.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'twist_service.TwistSampleService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class StrategyServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.startStrategyStream = channel.stream_stream(
        '/twist_service.StrategyService/startStrategyStream',
        request_serializer=rio__bridge__services__pb2.TwistData.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
        )


class StrategyServiceServicer(object):

  def startStrategyStream(self, request_iterator, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StrategyServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'startStrategyStream': grpc.stream_stream_rpc_method_handler(
          servicer.startStrategyStream,
          request_deserializer=rio__bridge__services__pb2.TwistData.FromString,
          response_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'twist_service.StrategyService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class CommandServiceStub(object):

    def __init__(self, channel):
        """Constructor.

        Args:
          channel: A grpc.Channel.
        """
        self.startCommandStream = channel.stream_stream(
            '/twist_service.CommandService/startCommandStream',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
        )


class CommandServiceServicer(object):

    def startCommandStream(self, request_iterator, context):
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'startCommandStream': grpc.stream_stream_rpc_method_handler(
            servicer.startCommandStream,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
            response_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'twist_service.CommandService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


class EncoderServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.startEncoderStream = channel.unary_stream(
        '/twist_service.EncoderService/startEncoderStream',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=rio__bridge__services__pb2.EncoderData.FromString,
        )


class EncoderServiceServicer(object):

  def startEncoderStream(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EncoderServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'startEncoderStream': grpc.unary_stream_rpc_method_handler(
          servicer.startEncoderStream,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=rio__bridge__services__pb2.EncoderData.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'twist_service.EncoderService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class HealthCheckServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.healthCheck = channel.stream_stream(
        '/twist_service.HealthCheckService/healthCheck',
        request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
        )


class HealthCheckServiceServicer(object):

  def healthCheck(self, request_iterator, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_HealthCheckServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'healthCheck': grpc.stream_stream_rpc_method_handler(
          servicer.healthCheck,
          request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
          response_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'twist_service.HealthCheckService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
